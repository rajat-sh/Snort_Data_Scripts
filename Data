Snort2

Category			DE						instance
Average bytes per packet	avg_bytes_per_wire_packet     			avg_bytes_per_wire_packet
SYN/SYN+ACK rate		syns_per_second synacks_per_second              syns_per_second synacks_per_second 

First use case is when single value from file is needed, in example below if you need value of syns_per_second.

Examples for files in detection_engines folder

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) if ($i == "syns_per_second") col=i; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col}' 2025-05-25

To process multiple files, you can use file globbing patterns

To process two files  2025-05-24 2025-05-25
 
awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) if ($i == "syns_per_second") col=i; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col}' 2025-05-2[4-5]

To process a range of files from 2025-05-20 to 2025-05-29

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) if ($i == "syns_per_second") col=i; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col}' 2025-05-2[0-9]

To proceess all files in month 2025-05

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) if ($i == "syns_per_second") col=i; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col}' 2025-05-*

Basic examples of globbing


*.txt matches all files with the .txt extension.
file?.txt matches file1.txt, file2.txt, but not file10.txt.
file[0-9].txt matches file0.txt, file1.txt, â€¦, file9.txt.
[0-9a-z] will match 0 to 9 and a to z (lowercase only).
[\w] will match any word characters (alphanumeric).
file[^0-9].txt matches fileA.txt, file_.txt, but not file1.txt.
*/* - will match foo/bar.



You can replace the value of column with any value, example to see syn/ack per second

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN/ACK_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) if ($i == "synacks_per_second") col=i; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col}' 2025-05-2[5-6]

Timestamp		SYN/ACK_PER_SECOND

2025-05-25 00:10:00	20.148
2025-05-25 00:15:00	20.757
2025-05-25 00:20:00	18.716
2025-05-25 00:25:00	19.634


For multiple columns example for syns_per_second and synacks_per_second

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\t""SYN/ACK_PER_SECOND""\n" } FNR==1  {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "syns_per_second") col1=i; if ($i == "synacks_per_second") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t"$col2}' 2025-05-25

Timestamp		SYN_PER_SECOND	SYN/ACK_PER_SECOND

2025-05-25 00:10:00	20.018		20.148
2025-05-25 00:15:00	20.648		20.757
2025-05-25 00:20:00	18.583		18.716
2025-05-25 00:25:00	19.508		19.634
2025-05-25 00:30:00	27.085		27.213
2025-05-25 00:35:00	19.992		20.135
2025-05-25 00:50:00	20.747		20.874


To do calculation using column values, example calcuating SYN to SYN/ACK ratio


awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\t""SYN/ACK_PER_SECOND""\t""SYN_TO_SYN/ACK_RATIO""\n" } FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "syns_per_second") col1=i; if ($i == "synacks_per_second") col2=i}; next}} /^[^#]/  {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t"$col2"\t""\t""\t"$col1/$col2}' 2025-05-2[5-6]

Timestamp		SYN_PER_SECOND	SYN/ACK_PER_SECOND	SYN_TO_SYN/ACK_RATIO

2025-05-25 00:10:00	20.018		20.148			0.993548
2025-05-25 00:15:00	20.648		20.757			0.994749
2025-05-25 00:20:00	18.583		18.716			0.992894
2025-05-25 00:25:00	19.508		19.634			0.993583
2025-05-25 00:30:00	27.085		27.213			0.995296
2025-05-25 00:35:00	19.992		20.135			0.992898
2025-05-25 00:40:00	19.53		19.664			0.993186
2025-05-25 00:45:00	20.931		21.052			0.994252


Common use cases for snort2 DE files

SYN to SYN/ACK ratio


awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\t""SYN/ACK_PER_SECOND""\t""SYN_TO_SYN/ACK_RATIO""\n" } FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "syns_per_second") col1=i; if ($i == "synacks_per_second") col2=i}; next}} /^[^#]/  {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t"$col2"\t""\t""\t"$col1/$col2}' 2025-05-2[5-6]


Average bytes per packet, Average throughput, Extrapolated average throughput


awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""Average_Bytes_Per_Packet""\t""Average_Throughput_Mbps""\t\t""Extrapolated_Average_Throughput_Mbps""\n" } FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "avg_bytes_per_wire_packet") col1=i; if ($i == "wire_mbits_per_sec.realtime") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t""\t""\t"$col2"\t""\t""\t\t"$col2*1024/$col1}' 2025-05-25

Timestamp		Average_Bytes_Per_Packet	Average_Throughput_Mbps		Extrapolated_Average_Throughput_Mbps

2025-05-25 00:10:00	400.333				0.848				2.16907
2025-05-25 00:15:00	410.667				0.863				2.15189
2025-05-25 00:20:00	400.667				0.794				2.02926
2025-05-25 00:25:00	412				0.856				2.12753


Snort2 receive and drop statistics

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""Receive_Packets_Stat""\t""Drop_Packets_Stat""\n" }FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "pkt_stats.pkts_recv") col1=i; if ($i == "pkt_stats.pkts_drop") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t""\t"$col2}' 2025-05-25

Timestamp		Receive_Packets_Stat	Drop_Packets_Stat

2025-05-25 00:10:00	246603			0
2025-05-25 00:15:00	246311			0
2025-05-25 00:35:00	243820			0


Common use cases for snort2 instance files

To get SYN, SYN/ACK and ratio  for all files in various instances, iterate through the files using wildcard character *, to get data of a specific instance use instance-N instead of instance-*, where N is number of instance

awk 'BEGIN { FS=","; print"\n" "FILENAME" "\t\t""Timestamp""\t""\t""SYN_PER_SECOND""\t""SYN/ACK_PER_SECOND""\t""SYN_TO_SYN/ACK_RATIO""\n" } FNR==2  {if (NR==2) {for (i=1; i<=NF; i++) {if ($i == "syns_per_second") col1=i; if ($i == "synacks_per_second") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print FILENAME"\t"t"\t"$col1"\t""\t"$col2"\t\t\t"$col1/$col2}' instance-*/2025-05-25

FILENAME		Timestamp		SYN_PER_SECOND	SYN/ACK_PER_SECOND	SYN_TO_SYN/ACK_RATIO

instance-1/2025-05-25	2025-05-25 00:05:00	1.621		1.621			1
instance-1/2025-05-25	2025-05-25 00:10:00	1.739		1.739			1
instance-1/2025-05-25	2025-05-25 00:15:00	1.611		1.607			1.00249



Average bytes per packet, Average throughput, Extrapolated average throughput

awk 'BEGIN { FS=","; print"\n" "FILENAME" "\t\t""Timestamp""\t""\t""Average_Bytes_Per_Packet""\t""Average_Throughput_Mbps""\t\t""Extrapolated_Average_Throughput_Mbps""\n" } FNR==2  {if (NR==2) {for (i=1; i<=NF; i++) {if ($i == "avg_bytes_per_wire_packet") col1=i; if ($i == "wire_mbits_per_sec.realtime") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print FILENAME"\t"t"\t"$col1"\t\t\t""\t"$col2"\t\t\t\t"$col2*1024/$col1}' instance-*/2025-05-25

FILENAME		Timestamp		Average_Bytes_Per_Packet	Average_Throughput_Mbps		Extrapolated_Average_Throughput_Mbps

instance-1/2025-05-25	2025-05-25 00:05:00	406				0.104				0.262305
instance-1/2025-05-25	2025-05-25 00:10:00	420				0.104				0.253562
instance-1/2025-05-25	2025-05-25 00:15:00	394				0.094				0.244305
instance-1/2025-05-25	2025-05-25 00:20:00	415				0.106				0.261552
instance-1/2025-05-25	2025-05-25 00:25:00	448				0.196				0.448
instance-1/2025-05-25	2025-05-25 00:30:00	409				0.096				0.240352
instance-1/2025-05-25	2025-05-25 00:35:00	400				0.097				0.24832
instance-1/2025-05-25	2025-05-25 00:40:00	420				0.107				0.260876
instance-1/2025-05-25	2025-05-25 00:45:00	373				0.093				0.255314
instance-1/2025-05-25	2025-05-25 00:50:00	427				0.098				0.235016
instance-1/2025-05-25	2025-05-25 00:55:00	398				0.119				0.306171


awk 'BEGIN { FS=","; print"\n" "FILENAME" "\t\t" "Timestamp""\t""\t""Receive_Packets_Stat""\t""Drop_Packets_Stat""\n" }FNR==2 {if (NR==2) {for (i=1; i<=NF; i++) {if ($i == "pkt_stats.pkts_recv") col1=i; if ($i == "pkt_stats.pkts_drop") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print FILENAME "\t" t"\t"$col1"\t""\t""\t"$col2}' instance-*/2025-05-25

FILENAME		Timestamp		Receive_Packets_Stat	Drop_Packets_Stat

instance-1/2025-05-25	2025-05-25 00:05:00	82105			0
instance-1/2025-05-25	2025-05-25 00:10:00	82167			0
instance-1/2025-05-25	2025-05-25 00:15:00	77131			0
instance-1/2025-05-25	2025-05-25 00:20:00	80655			0
instance-1/2025-05-25	2025-05-25 00:25:00	105303			0
instance-1/2025-05-25	2025-05-25 00:30:00	81273			0
instance-1/2025-05-25	2025-05-25 00:35:00	79771			0
instance-1/2025-05-25	2025-05-25 00:40:00	85757			0
instance-1/2025-05-25	2025-05-25 00:45:00	84045			0

snort3

Common use cases for snort2 DE files


SYN to SYN/ACK ratio


awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""SYN_PER_SECOND""\t""SYN/ACK_PER_SECOND""\t""SYN_TO_SYN/ACK_RATIO""\n" } FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "stats.syns_per_second") col1=i; if ($i == "stats.synacks_per_second") col2=i}; next}} /^[^#]/  {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t"$col2"\t""\t""\t"$col1/$col2}' 2025-06-16

Timestamp		SYN_PER_SECOND	SYN/ACK_PER_SECOND	SYN_TO_SYN/ACK_RATIO

2025-06-16 00:05:00	2062.38		1440.76			1.43145
2025-06-16 00:10:00	2097.5		1415.57			1.48174
2025-06-16 00:15:00	2027.88		1421.58			1.4265
2025-06-16 00:20:00	2014.45		1411.19			1.42748
2025-06-16 00:25:00	2016.46		1412.42			1.42766
2025-06-16 00:30:00	2021.11		1416.92			1.42641
2025-06-16 00:35:00	2073.02		1456.99			1.42281
2025-06-16 00:40:00	2024.59		1416.51			1.42928


Average bytes per packet, Average throughput, Extrapolated average throughput

awk 'BEGIN { FS=","; print"\n" "Timestamp""\t""\t""Average_Bytes_Per_Packet""\t""Average_Throughput_Mbps""\t\t""Extrapolated_Average_Throughput_Mbps""\n" } FNR==1 {if (NR==1) {for (i=1; i<=NF; i++) {if ($i == "stats.avg_bytes_per_wire_packet") col1=i; if ($i == "stats.wire_mbits_per_sec.realtime") col2=i}; next}} /^[^#]/ {cmd="date -d @" $1 " +\"%Y-%m-%d %H:%M:%S\""; cmd | getline t; close(cmd); print t"\t"$col1"\t""\t""\t""\t"$col2"\t""\t""\t\t"$col2*1024/$col1}' 2025-06-16

Timestamp		Average_Bytes_Per_Packet	Average_Throughput_Mbps		Extrapolated_Average_Throughput_Mbps

2025-06-16 00:05:00	227.616				29.6091				133.206
2025-06-16 00:10:00	214.23				30.196				144.334
2025-06-16 00:15:00	227.291				28.7088				129.34
2025-06-16 00:20:00	227.478				29.0659				130.841
2025-06-16 00:25:00	224.749				28.9921				132.094
2025-06-16 00:30:00	228.114				28.7579				129.094
2025-06-16 00:35:00	223.291				28.9825				132.912
2025-06-16 00:40:00	222.76				28.8268				132.513
2025-06-16 00:45:00	221.549				28.0272				129.542


